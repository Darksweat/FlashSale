// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flashsale.proto

#ifndef PROTOBUF_INCLUDED_flashsale_2eproto
#define PROTOBUF_INCLUDED_flashsale_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_flashsale_2eproto 

namespace protobuf_flashsale_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_flashsale_2eproto
namespace flashsale {
class FlashsaleRequest;
class FlashsaleRequestDefaultTypeInternal;
extern FlashsaleRequestDefaultTypeInternal _FlashsaleRequest_default_instance_;
class FlashsaleResponse;
class FlashsaleResponseDefaultTypeInternal;
extern FlashsaleResponseDefaultTypeInternal _FlashsaleResponse_default_instance_;
}  // namespace flashsale
namespace google {
namespace protobuf {
template<> ::flashsale::FlashsaleRequest* Arena::CreateMaybeMessage<::flashsale::FlashsaleRequest>(Arena*);
template<> ::flashsale::FlashsaleResponse* Arena::CreateMaybeMessage<::flashsale::FlashsaleResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flashsale {

// ===================================================================

class FlashsaleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flashsale.FlashsaleRequest) */ {
 public:
  FlashsaleRequest();
  virtual ~FlashsaleRequest();

  FlashsaleRequest(const FlashsaleRequest& from);

  inline FlashsaleRequest& operator=(const FlashsaleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlashsaleRequest(FlashsaleRequest&& from) noexcept
    : FlashsaleRequest() {
    *this = ::std::move(from);
  }

  inline FlashsaleRequest& operator=(FlashsaleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashsaleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlashsaleRequest* internal_default_instance() {
    return reinterpret_cast<const FlashsaleRequest*>(
               &_FlashsaleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FlashsaleRequest* other);
  friend void swap(FlashsaleRequest& a, FlashsaleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlashsaleRequest* New() const final {
    return CreateMaybeMessage<FlashsaleRequest>(NULL);
  }

  FlashsaleRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlashsaleRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlashsaleRequest& from);
  void MergeFrom(const FlashsaleRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlashsaleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string usrname = 1;
  void clear_usrname();
  static const int kUsrnameFieldNumber = 1;
  const ::std::string& usrname() const;
  void set_usrname(const ::std::string& value);
  #if LANG_CXX11
  void set_usrname(::std::string&& value);
  #endif
  void set_usrname(const char* value);
  void set_usrname(const char* value, size_t size);
  ::std::string* mutable_usrname();
  ::std::string* release_usrname();
  void set_allocated_usrname(::std::string* usrname);

  // string usrkey = 2;
  void clear_usrkey();
  static const int kUsrkeyFieldNumber = 2;
  const ::std::string& usrkey() const;
  void set_usrkey(const ::std::string& value);
  #if LANG_CXX11
  void set_usrkey(::std::string&& value);
  #endif
  void set_usrkey(const char* value);
  void set_usrkey(const char* value, size_t size);
  ::std::string* mutable_usrkey();
  ::std::string* release_usrkey();
  void set_allocated_usrkey(::std::string* usrkey);

  // @@protoc_insertion_point(class_scope:flashsale.FlashsaleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usrname_;
  ::google::protobuf::internal::ArenaStringPtr usrkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flashsale_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlashsaleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flashsale.FlashsaleResponse) */ {
 public:
  FlashsaleResponse();
  virtual ~FlashsaleResponse();

  FlashsaleResponse(const FlashsaleResponse& from);

  inline FlashsaleResponse& operator=(const FlashsaleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlashsaleResponse(FlashsaleResponse&& from) noexcept
    : FlashsaleResponse() {
    *this = ::std::move(from);
  }

  inline FlashsaleResponse& operator=(FlashsaleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashsaleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlashsaleResponse* internal_default_instance() {
    return reinterpret_cast<const FlashsaleResponse*>(
               &_FlashsaleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FlashsaleResponse* other);
  friend void swap(FlashsaleResponse& a, FlashsaleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlashsaleResponse* New() const final {
    return CreateMaybeMessage<FlashsaleResponse>(NULL);
  }

  FlashsaleResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlashsaleResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlashsaleResponse& from);
  void MergeFrom(const FlashsaleResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlashsaleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:flashsale.FlashsaleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_flashsale_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlashsaleRequest

// string usrname = 1;
inline void FlashsaleRequest::clear_usrname() {
  usrname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlashsaleRequest::usrname() const {
  // @@protoc_insertion_point(field_get:flashsale.FlashsaleRequest.usrname)
  return usrname_.GetNoArena();
}
inline void FlashsaleRequest::set_usrname(const ::std::string& value) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flashsale.FlashsaleRequest.usrname)
}
#if LANG_CXX11
inline void FlashsaleRequest::set_usrname(::std::string&& value) {
  
  usrname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flashsale.FlashsaleRequest.usrname)
}
#endif
inline void FlashsaleRequest::set_usrname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flashsale.FlashsaleRequest.usrname)
}
inline void FlashsaleRequest::set_usrname(const char* value, size_t size) {
  
  usrname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flashsale.FlashsaleRequest.usrname)
}
inline ::std::string* FlashsaleRequest::mutable_usrname() {
  
  // @@protoc_insertion_point(field_mutable:flashsale.FlashsaleRequest.usrname)
  return usrname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlashsaleRequest::release_usrname() {
  // @@protoc_insertion_point(field_release:flashsale.FlashsaleRequest.usrname)
  
  return usrname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlashsaleRequest::set_allocated_usrname(::std::string* usrname) {
  if (usrname != NULL) {
    
  } else {
    
  }
  usrname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usrname);
  // @@protoc_insertion_point(field_set_allocated:flashsale.FlashsaleRequest.usrname)
}

// string usrkey = 2;
inline void FlashsaleRequest::clear_usrkey() {
  usrkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlashsaleRequest::usrkey() const {
  // @@protoc_insertion_point(field_get:flashsale.FlashsaleRequest.usrkey)
  return usrkey_.GetNoArena();
}
inline void FlashsaleRequest::set_usrkey(const ::std::string& value) {
  
  usrkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flashsale.FlashsaleRequest.usrkey)
}
#if LANG_CXX11
inline void FlashsaleRequest::set_usrkey(::std::string&& value) {
  
  usrkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flashsale.FlashsaleRequest.usrkey)
}
#endif
inline void FlashsaleRequest::set_usrkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usrkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flashsale.FlashsaleRequest.usrkey)
}
inline void FlashsaleRequest::set_usrkey(const char* value, size_t size) {
  
  usrkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flashsale.FlashsaleRequest.usrkey)
}
inline ::std::string* FlashsaleRequest::mutable_usrkey() {
  
  // @@protoc_insertion_point(field_mutable:flashsale.FlashsaleRequest.usrkey)
  return usrkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlashsaleRequest::release_usrkey() {
  // @@protoc_insertion_point(field_release:flashsale.FlashsaleRequest.usrkey)
  
  return usrkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlashsaleRequest::set_allocated_usrkey(::std::string* usrkey) {
  if (usrkey != NULL) {
    
  } else {
    
  }
  usrkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usrkey);
  // @@protoc_insertion_point(field_set_allocated:flashsale.FlashsaleRequest.usrkey)
}

// -------------------------------------------------------------------

// FlashsaleResponse

// string result = 1;
inline void FlashsaleResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlashsaleResponse::result() const {
  // @@protoc_insertion_point(field_get:flashsale.FlashsaleResponse.result)
  return result_.GetNoArena();
}
inline void FlashsaleResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flashsale.FlashsaleResponse.result)
}
#if LANG_CXX11
inline void FlashsaleResponse::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flashsale.FlashsaleResponse.result)
}
#endif
inline void FlashsaleResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flashsale.FlashsaleResponse.result)
}
inline void FlashsaleResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flashsale.FlashsaleResponse.result)
}
inline ::std::string* FlashsaleResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:flashsale.FlashsaleResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlashsaleResponse::release_result() {
  // @@protoc_insertion_point(field_release:flashsale.FlashsaleResponse.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlashsaleResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:flashsale.FlashsaleResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace flashsale

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_flashsale_2eproto
